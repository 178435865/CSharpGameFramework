require "cs2lua__utility";
require "cs2lua__namespaces";
require "AiCommand";

AiCastSkill = {
	cctor = function()
	end,

	__new_object = function(...)
		return newobject(AiCastSkill, nil, {}, ...);
	end,
	__define_class = function()
		local static = AiCastSkill;
		local static_fields = nil;
		local static_props = nil;
		local static_events = nil;

		local instance_methods = {
			Clone = function(this)
				return newobject(AiCastSkill, "ctor", {});
			end,
			ResetState = function(this)
				this.m_ParamReaded = false;
				this.m_SkillCasted = false;
			end,
			ExecCommand = function(this, instance, _params, delta)
				local args; args = _params.Values;
				if (not this.m_ParamReaded) then
					this.m_ObjId = typecast(getexterninstanceindexer(args, nil, "get_Item", 0), System.Int32);
					this.m_SkillInfo = typecast(getexterninstanceindexer(args, nil, "get_Item", 1), GameFramework.SkillInfo);
				end;
				if (not this.m_SkillCasted) then
					local npc; npc = GameFramework.PluginFramework.Instance:GetEntityById(this.m_ObjId);
					if ((nil ~= npc) and (not npc:IsUnderControl())) then
						local targetId; targetId = npc:GetAiStateInfo().Target;
						local target; target = GameFramework.PluginFramework.Instance:GetEntityById(targetId);
						if (((nil ~= target) and (not target:IsDead())) and (GameFramework.Geometry.DistanceSquare(npc:GetMovementStateInfo():GetPosition3D(), target:GetMovementStateInfo():GetPosition3D()) <= (this.m_SkillInfo.Distance * this.m_SkillInfo.Distance))) then
							local srcPos; srcPos = npc:GetMovementStateInfo():GetPosition3D();
							local targetPos; targetPos = target:GetMovementStateInfo():GetPosition3D();
							local dir; dir = GameFramework.Geometry.GetYRadian(srcPos, targetPos);
							local curDir; curDir = npc:GetMovementStateInfo():GetFaceDir();
							if (UnityEngine.Mathf.Abs((dir - curDir)) > 0.157) then
								npc:GetMovementStateInfo():SetWantedFaceDir(dir);
							else
								this.m_SkillCasted = true;
								AiCommand.AiStopPursue(npc);
								AiCommand.AiSkill(npc, this.m_SkillInfo.SkillId);
							end;
							return true;
						elseif (not this.m_SkillInfo.ConfigData.needTarget) then
							this.m_SkillCasted = true;
							AiCommand.AiStopPursue(npc);
							AiCommand.AiSkill(npc, this.m_SkillInfo.SkillId);
						end;
					end;
				else
					local npc; npc = GameFramework.PluginFramework.Instance:GetEntityById(this.m_ObjId);
					if (nil ~= npc) then
						local info; info = npc:GetAiStateInfo();
						if npc:GetSkillStateInfo():IsSkillActivated() then
							return true;
						else
							return false;
						end;
					end;
				end;
				return false;
			end,
			ctor = function(this)
			end,
		};

		local instance_build = function()
			local instance_fields = {
				m_ObjId = 0,
				m_SkillInfo = nil,
				m_SkillCasted = false,
				m_ParamReaded = false,
			};
			return instance_fields;
		end;
		local instance_props = nil;
		local instance_events = nil;
		local interfaces = {
			"GameFramework.Plugin.ISimpleStoryCommandPlugin",
		};

		local interface_map = {
			GameFramework_Plugin_ISimpleStoryCommandPlugin_Clone = "Clone",
			GameFramework_Plugin_ISimpleStoryCommandPlugin_ResetState = "ResetState",
			GameFramework_Plugin_ISimpleStoryCommandPlugin_ExecCommand = "ExecCommand",
		};


		return defineclass(nil, "AiCastSkill", static, static_fields, static_props, static_events, instance_methods, instance_build, instance_props, instance_events, interfaces, interface_map, false);
	end,
};


AiCastSkill.__define_class();

